name: AutoDeploy

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'README.md'

env:
  namespace: default
  cluster: my-k8s-sample
  repo_name: ${{ github.event.repository.name }}

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Canceling a running workflow
        uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.ecr.outputs.image }}

    steps:
      - name: Check out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: JDK setup
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew
        working-directory: ./test-app

      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/dependency-check-data
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
    
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_AWS_REGION }}

      - name: ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Gradle execution Register with Docker Build and ECR with jib
        id: ecr
        run: |
          NOW=$(date "+%Y%m%d-%H%M%S")
            ./gradlew jib -s --profile --image=${{ secrets.ECR_AWS_ENDPOINT }}:${{ env.repo_name }}-rel-vMain${NOW}
          echo ::set-output name=image::${{ env.repo_name }}-rel-vMain${NOW}
        working-directory: ./test-app

      - name: ECR image name
        run: echo ${{ steps.ecr.outputs.image }}
        
      - name: Deploy Helm
        uses: deliverybot/helm@v1
        with:
          release: '${{ steps.ecr.outputs.image }}'
          namespace: ${{ env.namespace }}
          cluster-name: ${{ env.cluster }}
          values: |
            image: ${{ secrets.ECR_AWS_ENDPOINT }}:${{ steps.ecr.outputs.image }}
          value-files: 'platform/helm/values.yaml'
          chart: 'platform/helm'
        env:
          KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
